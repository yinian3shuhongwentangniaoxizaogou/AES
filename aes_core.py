import numpy as np

# S-box
s_box = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

inv_s_box = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

# Rcon，轮常数
r_con = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
]


def key_expansion(key):
    key_symbols = [ord(char) for char in key]
    key_schedule = np.array(key_symbols + [0] * (176 - len(key_symbols)), dtype=np.uint8).reshape(4, 44)
    for i in range(4, 44):
        temp = key_schedule[:, i - 1].copy()
        if i % 4 == 0:
            temp = np.roll(temp, -1)
            temp = np.array([s_box[b] for b in temp], dtype=np.uint8)
            temp[0] ^= r_con[i // 4 - 1]
        key_schedule[:, i] = key_schedule[:, i - 4] ^ temp
    return key_schedule


def check_key(key):
    if len(key) != 16:
        raise ValueError("Key must be exactly 16 characters long.")
    return key


def add_round_key(state, key_schedule, round=0):
    return state ^ key_schedule[:, round * 4:(round + 1) * 4]


def sub_bytes(state):
    return np.vectorize(lambda x: s_box[x])(state)


def shift_rows(state):
    for i in range(1, 4):
        state[i] = np.roll(state[i], -i)
    return state


def mix_columns(s):
    for i in range(4):
        t = s[0, i] ^ s[1, i] ^ s[2, i] ^ s[3, i]
        u = s[0, i]
        s[0, i] ^= t ^ xtime(s[0, i] ^ s[1, i])
        s[1, i] ^= t ^ xtime(s[1, i] ^ s[2, i])
        s[2, i] ^= t ^ xtime(s[2, i] ^ s[3, i])
        s[3, i] ^= t ^ xtime(s[3, i] ^ u)
    return s


def xtime(x):
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b)) & 0xff


def pkcs7_padding(data):
    padding_len = 16 - (len(data) % 16)
    padding = bytes([padding_len] * padding_len)
    return data + padding


def aes_encrypt(plaintext, key):
    key = check_key(key)
    plaintext_bytes = plaintext.encode('utf-8')
    padded_plaintext = pkcs7_padding(plaintext_bytes)
    print("Padded plaintext (bytes):", padded_plaintext)  # 显示填充后的明文

    state = np.array([list(padded_plaintext[i:i + 4]) for i in range(0, len(padded_plaintext), 4)], dtype=np.uint8).T
    key_schedule = key_expansion(key)
    state = add_round_key(state, key_schedule)
    for round in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, key_schedule, round)
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, key_schedule, 10)
    ciphertext = ''.join(format(x, '02x') for x in state.T.flatten())
    print("Ciphertext (hex):", ciphertext)  # 显示加密后的密文
    return ciphertext


def inv_sub_bytes(state):
    return np.vectorize(lambda x: inv_s_box[x])(state)  # 正确使用逆S盒


def inv_shift_rows(state):
    for i in range(1, 4):
        state[i] = np.roll(state[i], i)  # 正确反向行移位
    return state


def inv_mix_columns(s):
    for i in range(4):
        a = s[0, i]
        b = s[1, i]
        c = s[2, i]
        d = s[3, i]
        s[0, i] = mul_by_0e(a) ^ mul_by_0b(b) ^ mul_by_0d(c) ^ mul_by_09(d)
        s[1, i] = mul_by_09(a) ^ mul_by_0e(b) ^ mul_by_0b(c) ^ mul_by_0d(d)
        s[2, i] = mul_by_0d(a) ^ mul_by_09(b) ^ mul_by_0e(c) ^ mul_by_0b(d)
        s[3, i] = mul_by_0b(a) ^ mul_by_0d(b) ^ mul_by_09(c) ^ mul_by_0e(d)
    return s


def xtime(x):
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b)) & 0xff


def mul_by_09(x):
    return xtime(xtime(xtime(x))) ^ x


def mul_by_0b(x):
    return xtime(xtime(xtime(x))) ^ xtime(x) ^ x


def mul_by_0d(x):
    return xtime(xtime(xtime(x))) ^ xtime(xtime(x)) ^ x


def mul_by_0e(x):
    return xtime(xtime(xtime(x))) ^ xtime(xtime(x)) ^ xtime(x)


def aes_decrypt(ciphertext, key):
    ciphertext_bytes = bytes.fromhex(ciphertext)
    state = np.array([list(ciphertext_bytes[i:i + 4]) for i in range(0, len(ciphertext_bytes), 4)], dtype=np.uint8).T
    key_schedule = key_expansion(key)

    state = add_round_key(state, key_schedule, 10)  # 开始解密，添加最后一轮密钥
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)

    for round in range(9, 0, -1):  # 反向执行其他轮
        state = add_round_key(state, key_schedule, round)
        state = inv_mix_columns(state)
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)

    state = add_round_key(state, key_schedule, 0)  # 最后添加第一轮密钥
    # 确保state矩阵是numpy.uint8类型，如果不是，可以进行转换
    if state.dtype != np.uint8:
        state = state.astype(np.uint8)

    # 将state矩阵转换为字节序列，不应该有额外的零字节
    decrypted_bytes = bytes(state.T.flatten())

    padding_len = decrypted_bytes[-1]
    if padding_len < 1 or padding_len > 16 or decrypted_bytes[-padding_len:] != bytes([padding_len] * padding_len):
        return f"Invalid padding length or content: {padding_len}"

    decrypted_bytes = decrypted_bytes[:-padding_len]
    return decrypted_bytes.decode('utf-8')
